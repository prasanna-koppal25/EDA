{
	"info": {
		"_postman_id": "43e8d8d9-23f0-4d64-81ce-b5264aa31d4d",
		"name": "EDA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "31866046-43e8d8d9-23f0-4d64-81ce-b5264aa31d4d"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "save user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "008a805f-629d-4e46-879c-babe188fb068",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.to.have.status(200));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response schema for saved user data\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.Proceed).to.be.a('boolean');\r",
									"  pm.expect(responseData.message).to.be.a('string');\r",
									"  pm.expect(responseData.s_ID).to.be.a('string');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "467cfe60-9c3e-4779-801c-0170494244ba",
								"exec": [
									"pm.test(\"Validate the request body\", function () {\r",
									"  const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"\r",
									"  pm.expect(requestBody).to.be.an('object');\r",
									"  pm.expect(requestBody.nickname).to.be.a('string');\r",
									"  pm.expect(requestBody.name).to.be.a('string');\r",
									"  pm.expect(requestBody.email).to.match(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/);\r",
									"  pm.expect(requestBody.sid).to.be.a('string');\r",
									"  pm.expect(requestBody.sub).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b197ae02-aeda-4552-ba8b-5fb7720ac163",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nickname\": \"Darshan\",\r\n  \"name\": \"Darshan k\",\r\n  \"email\": \"Darshan25@gmail.com\",\r\n  \"sid\": \"Dars\",\r\n  \"sub\": \"Ik28\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/save-user",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"save-user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0917be27-8088-43fb-bd11-57b256ee3822",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - Proceed, message, and sub\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('Proceed');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('sub');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the Content-Type header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3bab7270-3808-403f-b555-aad27cc212c1",
								"exec": [
									"pm.test(\"Check if 'sub' query parameter is set\", function () {\r",
									"    // Get the query parameters from the request URL\r",
									"    const queryParams = pm.request.url.query.all();\r",
									"\r",
									"    // Find the 'sub' query parameter\r",
									"    const subParam = queryParams.find(param => param.key === 'sub');\r",
									"\r",
									"    // Check if the 'sub' parameter is defined and not empty\r",
									"    pm.expect(subParam).to.not.be.undefined;\r",
									"    pm.expect(subParam.value).to.be.a('string').that.is.not.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "236cd248-a450-4fa9-9510-f90b9eabaf6f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sub",
								"value": "ha23",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/authenticate-user?sub=Ik28",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"authenticate-user"
							],
							"query": [
								{
									"key": "sub",
									"value": "Ik28"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "169c2551-1a78-484d-b4f3-7e5bd9fc0909",
								"exec": [
									"// Updated response time test to 300ms\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Updated response time test to 300ms\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"// Test for the correct structure of the response schema\r",
									"pm.test(\"Response schema has the correct structure\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('Proceed');\r",
									"    pm.expect(responseData).to.have.property('response');\r",
									"    pm.expect(responseData.response).to.be.an('object').that.has.property('message');\r",
									"});\r",
									"\r",
									"//Test for Valid JSON Structure\r",
									"pm.test(\"Response is a valid JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"//Test for HTTP Headers\r",
									"pm.test(\"Response has correct headers\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9f385f67-ca8d-4598-8b08-cb8d271dfb1d",
								"exec": [
									"pm.test(\"Check if 'db' query parameter is set\", function () {\r",
									"    const queryParams = pm.request.url.query.all();\r",
									"    const dbParam = queryParams.find(param => param.key === 'db');\r",
									"    pm.expect(dbParam).to.not.be.undefined;\r",
									"    pm.expect(dbParam.value).to.be.oneOf(['pg', 'mysql']);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate request body schema\", function () {\r",
									"    const body = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"\r",
									"    pm.expect(body).to.be.an('object');\r",
									"    pm.expect(body.username).to.be.a('string').that.is.not.empty;\r",
									"    pm.expect(body.password).to.be.a('string').that.is.not.empty;\r",
									"    pm.expect(body.port).to.be.a('number').that.is.above(0);\r",
									"    pm.expect(body.host).to.be.a('string').that.is.not.empty;\r",
									"    pm.expect(body.database).to.be.a('string').that.is.not.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "35555716-45db-49ca-8edd-7844eeaa22a1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "db",
								"value": "pg",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"sa\",\r\n  \"password\": \"darshan1234\",\r\n  \"port\": 1433,\r\n  \"host\": \"localhost\",\r\n  \"database\": \"CDC\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/user/verify-connection?db=mssql",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"user",
								"verify-connection"
							],
							"query": [
								{
									"key": "db",
									"value": "mssql"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Users- Add Connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72859352-e7f4-4a4e-95d0-855c2e63a7ef",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Test for the correct structure of the response schema\r",
									"pm.test(\"Response schema has the correct structure\", function () {\r",
									"    // Ensure response data is correctly parsed\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    // Validate that responseData is an object\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"\r",
									"    // Validate 'success' property\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData.success).to.be.a('boolean');\r",
									"\r",
									"    // Validate 'message' property\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData.message).to.be.a('string').that.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b5295aa5-794e-4dc0-8039-9646e71be712",
								"exec": [
									"pm.test(\"Check if 'sub' and 'db' query parameter is set\", function () {\r",
									"    const queryParams = pm.request.url.query.all();\r",
									"\r",
									"    const subParam = queryParams.find(param => param.key === 'sub');\r",
									"    const dbParam = queryParams.find(param => param.key === 'db');\r",
									"\r",
									"    // Check if the 'sub' parameter is defined and not empty\r",
									"    pm.expect(subParam).to.not.be.undefined;\r",
									"    pm.expect(subParam.value).to.be.a('string').that.is.not.empty;\r",
									"\r",
									"    pm.expect(dbParam).to.not.be.undefined;\r",
									"    pm.expect(dbParam.value).to.equal('pg');\r",
									"});\r",
									"\r",
									"pm.test(\"Validate request body schema\", function () {\r",
									"    const body = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"\r",
									"    pm.expect(body).to.be.an('object');\r",
									"    pm.expect(body.username).to.be.a('string').that.is.not.empty;\r",
									"    pm.expect(body.password).to.be.a('string').that.is.not.empty;\r",
									"    pm.expect(body.port).to.be.a('number').that.is.above(0);\r",
									"    pm.expect(body.host).to.be.a('string').that.is.not.empty;\r",
									"    pm.expect(body.database).to.be.a('string').that.is.not.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d6be4b4f-93db-4c1f-872f-769f883b0ad5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"sa\",\r\n  \"password\": \"darshan1234\",\r\n  \"port\": 1433,\r\n  \"host\": \"localhost\",\r\n  \"database\": \"master\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/users/add-connection?sub=Ik28&db=mssql",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"users",
								"add-connection"
							],
							"query": [
								{
									"key": "sub",
									"value": "Ik28"
								},
								{
									"key": "db",
									"value": "mssql"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Users - Delete Connection",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4d4600c9-fcfd-4653-9b9a-921ec9cd8964",
								"exec": [
									"pm.test(\"Check if 'sub' and 'db' query parameter is set\", function () {\r",
									"    const queryParams = pm.request.url.query.all();\r",
									"\r",
									"    const subParam = queryParams.find(param => param.key === 'sub');\r",
									"    const dbParam = queryParams.find(param => param.key === 'db');\r",
									"\r",
									"    // Check if the 'sub' parameter is defined and not empty\r",
									"    pm.expect(subParam).to.not.be.undefined;\r",
									"    pm.expect(subParam.value).to.be.a('string').that.is.not.empty;\r",
									"\r",
									"    pm.expect(dbParam).to.not.be.undefined;\r",
									"    pm.expect(dbParam.value).to.equal('pg');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ba469ce-05fa-44c3-802e-0129994365c8",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - success and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.success).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Success field is a boolean and message is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.success).to.be.a('boolean');\r",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b5641c5f-036b-4ef4-8644-798ab3c4097a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/users/delete-connection?sub=Ik27&db=pg",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"users",
								"delete-connection"
							],
							"query": [
								{
									"key": "sub",
									"value": "Ik27"
								},
								{
									"key": "db",
									"value": "pg"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "8e1a4531-c55e-4c00-a7b2-f02c5d549d17"
		},
		{
			"name": "Database",
			"item": [
				{
					"name": "Connect to Database",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dec698d7-220c-43da-ae44-d1c3120b5264",
								"exec": [
									"pm.test(\"Check if 'sub' query parameter is set\", function () {\r",
									"    // Get the query parameters from the request URL\r",
									"    const queryParams = pm.request.url.query.all();\r",
									"\r",
									"    // Find the 'sub' query parameter\r",
									"    const subParam = queryParams.find(param => param.key === 'sub');\r",
									"\r",
									"    // Check if the 'sub' parameter is defined and not empty\r",
									"    pm.expect(subParam).to.not.be.undefined;\r",
									"    pm.expect(subParam.value).to.be.a('string').that.is.not.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ca7bc45f-c2ed-42c5-a027-ff0f743994b9",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Database connection object structure is valid\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  const db = responseData.mysql || responseData.pg;\r",
									"  pm.expect(db).to.exist.and.to.be.an('object');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ensure that the 'message' field in the 'mysql' object is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.mysql.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e3f81f02-be92-4dd2-9699-352cc94059df",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/connect?sub=Ik27",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"connect"
							],
							"query": [
								{
									"key": "sub",
									"value": "Ik27"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2a3fe5a0-2f86-47b4-bfe7-34340a8b60a6",
								"exec": [
									"pm.test(\"Check if 'sub' query parameter is set\", function () {\r",
									"    // Get the query parameters from the request URL\r",
									"    const queryParams = pm.request.url.query.all();\r",
									"\r",
									"    // Find the 'sub' query parameter\r",
									"    const subParam = queryParams.find(param => param.key === 'sub');\r",
									"\r",
									"    // Check if the 'sub' parameter is defined and not empty\r",
									"    pm.expect(subParam).to.not.be.undefined;\r",
									"    pm.expect(subParam.value).to.be.a('string').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a27f10f9-dc82-482f-a9bd-f4ba600b84e8",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Buckets array should not be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.buckets.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Bucket key should be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    responseData.buckets.forEach(function(bucket) {\r",
									"        pm.expect(bucket.key).to.be.a('string').and.to.not.be.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the structure of the 'buckets' array\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.buckets).to.be.an('array');\r",
									"    \r",
									"    responseData.buckets.forEach(function(bucket) {\r",
									"        pm.expect(bucket).to.be.an('object');\r",
									"        pm.expect(bucket.key).to.exist.and.to.not.be.empty;\r",
									"        pm.expect(bucket.doc_count).to.exist.and.to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3755f716-01d5-4bdd-aaef-f3df01e908e7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/tables/?sub=Ik28",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"tables",
								""
							],
							"query": [
								{
									"key": "sub",
									"value": "Ik28"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Detailed_tables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36db4b75-b7fb-4814-a7c8-b13a636ee869",
								"exec": [
									"// Fixed syntax error in the last test\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Tables array should exist in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.tables).to.exist.and.to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Tables array should not be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.tables.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Table description should be a string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    responseData.tables.forEach(function(table) {\r",
									"        pm.expect(table.table_description).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Table names should be unique\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const tableNames = responseData.tables.map(table => table.table_name);\r",
									"    const uniqueTableNames = new Set(tableNames);\r",
									"    pm.expect(uniqueTableNames.size).to.equal(tableNames.length);\r",
									"});\r",
									"\r",
									"pm.test(\"Number of rows and columns should be non-negative\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    responseData.tables.forEach(function(table) {\r",
									"        pm.expect(table.no_of_rows).to.be.at.least(0);\r",
									"        pm.expect(table.no_of_columns).to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each table object has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.tables).to.be.an('array');\r",
									"    responseData.tables.forEach(function(table) {\r",
									"        pm.expect(table).to.have.property('platform_type').that.is.a('string');\r",
									"        pm.expect(table).to.have.property('database_name').that.is.a('string');\r",
									"        pm.expect(table).to.have.property('table_name').that.is.a('string');\r",
									"        pm.expect(table).to.have.property('user_name').that.is.a('string');\r",
									"        pm.expect(table).to.have.property('no_of_rows').that.is.a('number');\r",
									"        pm.expect(table).to.have.property('no_of_columns').that.is.a('number');\r",
									"        pm.expect(table).to.have.property('table_description');\r",
									"        pm.expect(table.table_description).to.satisfy(function(desc) {\r",
									"            return typeof desc === 'string' || desc === null;\r",
									"        });\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "929674cb-151b-4db0-8721-b7b1eb0a121b",
								"exec": [
									"pm.test(\"Check if 'sub', 'page' and 'size' query parameter is set\", function () {\r",
									"    const queryParams = pm.request.url.query.all();\r",
									"\r",
									"    const subParam = queryParams.find(param => param.key === 'sub');\r",
									"    const pageParam = queryParams.find(param => param.key === 'page');\r",
									"    const sizeParam = queryParams.find(param => param.key === 'size');\r",
									"\r",
									"    // Check if the 'sub' parameter is defined and not empty\r",
									"    pm.expect(subParam).to.not.be.undefined;\r",
									"    pm.expect(subParam.value).to.be.a('string').that.is.not.empty;\r",
									"\r",
									"    pm.expect(pageParam).to.not.be.undefined;\r",
									"    pm.expect(pageParam.value).to.be.a('string').that.is.not.empty;\r",
									"\r",
									"    pm.expect(sizeParam).to.not.be.undefined;\r",
									"    pm.expect(sizeParam.value).to.be.a('string').that.is.not.empty;\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "06b3e919-8676-4670-9a0c-f29ea3d96159",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/detailed_tables/?sub=Ik28&page=1&size=10",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"detailed_tables",
								""
							],
							"query": [
								{
									"key": "sub",
									"value": "Ik28"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Table-Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "811f0741-d8e7-4a4b-991f-1b13e6240724",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 5000ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.include.all.keys(\r",
									"        'platform_type', \r",
									"        'database_name', \r",
									"        'table_name', \r",
									"        'no_of_rows', \r",
									"        'no_of_columns', \r",
									"        'user_name', \r",
									"        'size', \r",
									"        'created_at', \r",
									"        'schema', \r",
									"        'sample_data', \r",
									"        'queries', \r",
									"        'profile_data_quality', \r",
									"        'schema_definition', \r",
									"        'lineage'\r",
									"    );\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the sample_data object structure and fields within the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.sample_data).to.be.an('object');\r",
									"    pm.expect(responseData.sample_data.first_rows).to.be.an('array');\r",
									"    pm.expect(responseData.sample_data.last_rows).to.be.an('array');\r",
									"    \r",
									"    responseData.sample_data.first_rows.forEach(function(row) {\r",
									"        pm.expect(row).to.be.an('object');\r",
									"        pm.expect(row.Table).to.exist.and.to.be.a('number');\r",
									"        pm.expect(row[\"Create Table\"]).to.exist.and.to.be.a('string');\r",
									"    });\r",
									"    \r",
									"    responseData.sample_data.last_rows.forEach(function(row) {\r",
									"        pm.expect(row).to.be.an('object');\r",
									"        pm.expect(row.Table).to.exist.and.to.be.a('number');\r",
									"        pm.expect(row[\"Create Table\"]).to.exist.and.to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the overall structure and fields of the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.platform_type).to.be.a('string');\r",
									"    pm.expect(responseData.database_name).to.be.a('string');\r",
									"    pm.expect(responseData.table_name).to.be.a('string');\r",
									"    pm.expect(responseData.no_of_rows).to.be.a('number');\r",
									"    pm.expect(responseData.no_of_columns).to.be.a('number');\r",
									"    pm.expect(responseData.user_name).to.be.a('string');\r",
									"    pm.expect(responseData.size).to.be.a('number');\r",
									"    pm.expect(responseData.created_at).to.be.a('string');\r",
									"    pm.expect(responseData.schema).to.be.an('array');\r",
									"    pm.expect(responseData.sample_data).to.be.an('object');\r",
									"    pm.expect(responseData.queries).to.be.an('object');\r",
									"    pm.expect(responseData.profile_data_quality).to.be.an('object');\r",
									"    pm.expect(responseData.schema_definition).to.be.a('string');\r",
									"    pm.expect(responseData.lineage).to.be.an('object');\r",
									"    \r",
									"    responseData.schema.forEach(function(column) {\r",
									"        pm.expect(column).to.be.an('object');\r",
									"        pm.expect(column.column_name).to.be.a('string');\r",
									"        pm.expect(column.data_type).to.be.a('string');\r",
									"        pm.expect(column.column_description).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the profile_data_quality object structure and fields within the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.profile_data_quality).to.be.an('object');\r",
									"    pm.expect(responseData.profile_data_quality.table_profile).to.be.an('object');\r",
									"    pm.expect(responseData.profile_data_quality.column_profile).to.be.an('object');\r",
									"    pm.expect(responseData.profile_data_quality.column_profile.column_stats).to.be.an('array');\r",
									"    \r",
									"    responseData.profile_data_quality.column_profile.column_stats.forEach(function(stat) {\r",
									"        pm.expect(stat).to.be.an('object');\r",
									"        pm.expect(stat.database_name).to.be.a('string');\r",
									"        pm.expect(stat.table_name).to.be.a('string');\r",
									"        pm.expect(stat.column_name).to.be.a('string');\r",
									"        pm.expect(stat.null_percentage).to.be.a('number');\r",
									"        pm.expect(stat.distinct_percentage).to.be.a('number');\r",
									"        pm.expect(stat.unique_percentage).to.be.a('number');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the lineage object structure and fields within the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.lineage).to.be.an('object');\r",
									"    pm.expect(responseData.lineage.nodes).to.be.an('array');\r",
									"    pm.expect(responseData.lineage.edges).to.be.an('array');\r",
									"    \r",
									"    responseData.lineage.nodes.forEach(function(node) {\r",
									"        pm.expect(node).to.be.an('object');\r",
									"        pm.expect(node.id).to.be.a('string');\r",
									"    });\r",
									"    \r",
									"    responseData.lineage.edges.forEach(function(edge) {\r",
									"        pm.expect(edge).to.be.an('object');\r",
									"        pm.expect(edge.source).to.be.a('string');\r",
									"        pm.expect(edge.target).to.be.a('string');\r",
									"        pm.expect(edge.columns).to.be.an('array');\r",
									"        \r",
									"        edge.columns.forEach(function(column) {\r",
									"            pm.expect(column).to.be.a('string');\r",
									"        });\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e837f944-ec80-4924-93d5-99b8fd962b41",
								"exec": [
									"pm.test(\"Check if 'sub', 'database_name' ,'table_name' and platform_type query parameter is set\", function () {\r",
									"    const queryParams = pm.request.url.query.all();\r",
									"\r",
									"    const subParam = queryParams.find(param => param.key === 'sub');\r",
									"    const database_nameParam = queryParams.find(param => param.key === 'database_name');\r",
									"    const table_nameParam = queryParams.find(param => param.key === 'table_name');\r",
									"    const platform_typeParma=queryParams.find(param => param.key === 'platform_name');\r",
									"\r",
									"    // Check if the 'sub' parameter is defined and not empty\r",
									"    pm.expect(subParam).to.not.be.undefined;\r",
									"    pm.expect(subParam.value).to.be.a('string').that.is.not.empty;\r",
									"\r",
									"    pm.expect(database_nameParam).to.not.be.undefined;\r",
									"    pm.expect(database_nameParam.value).to.be.a('string').that.is.not.empty;\r",
									"\r",
									"    pm.expect(table_nameParam).to.not.be.undefined;\r",
									"    pm.expect(table_nameParam.value).to.be.a('string').that.is.not.empty;\r",
									"\r",
									"    pm.expect(platform_typeParma).to.not.be.undefined;\r",
									"    pm.expect(platform_typeParma.value).to.be.a('string').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "4d1376cb-dc7c-42f3-9c94-ef5777f568fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/table-details/?sub=Ik28&database_name=cdcDB&table_name=product_master&platform_name=mssql",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"table-details",
								""
							],
							"query": [
								{
									"key": "sub",
									"value": "Ik28"
								},
								{
									"key": "database_name",
									"value": "cdcDB"
								},
								{
									"key": "table_name",
									"value": "product_master"
								},
								{
									"key": "platform_name",
									"value": "mssql"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Table Metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cdbbc479-c8e1-4465-b062-66fc290b6b7b",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within the acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the schema of the databases array\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.databases).to.be.an('array');\r",
									"\r",
									"  responseData.databases.forEach(function(database) {\r",
									"    pm.expect(database).to.be.an('object');\r",
									"    pm.expect(database.database_name).to.exist.and.to.be.a('string');\r",
									"    pm.expect(database.size).to.exist.and.to.be.a('string');\r",
									"    pm.expect(database.platform_type).to.exist.and.to.be.a('string');\r",
									"    pm.expect(database.owner).to.exist.and.to.be.a('string');\r",
									"  });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ensure each database object has non-empty fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.databases).to.be.an('array');\r",
									"    responseData.databases.forEach(function(database) {\r",
									"        pm.expect(database.database_name).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"        pm.expect(database.size).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"        pm.expect(database.platform_type).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"        pm.expect(database.owner).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5ab21397-8994-4208-85c1-924facf6f66f",
								"exec": [
									"pm.test(\"Check if 'sub', 'page' and 'size' query parameter is set\", function () {\r",
									"    const queryParams = pm.request.url.query.all();\r",
									"\r",
									"    const subParam = queryParams.find(param => param.key === 'sub');\r",
									"    const pageParam = queryParams.find(param => param.key === 'page');\r",
									"    const sizeParam = queryParams.find(param => param.key === 'size');\r",
									"\r",
									"    // Check if the 'sub' parameter is defined and not empty\r",
									"    pm.expect(subParam).to.not.be.undefined;\r",
									"    pm.expect(subParam.value).to.be.a('string').that.is.not.empty;\r",
									"\r",
									"    pm.expect(pageParam).to.not.be.undefined;\r",
									"    pm.expect(pageParam.value).to.be.a('string').that.is.not.empty;\r",
									"\r",
									"    pm.expect(sizeParam).to.not.be.undefined;\r",
									"    pm.expect(sizeParam.value).to.be.a('string').that.is.not.empty;\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ca4ae0ad-b9bf-4d04-ab94-60e5b34a307e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/databases/?sub=Ik28&page=1&size=10",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"databases",
								""
							],
							"query": [
								{
									"key": "sub",
									"value": "Ik28"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Schemas",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a1db6a3e-34ea-4a28-801f-04ad2100f83a",
								"exec": [
									"pm.test(\"Check if 'sub', 'database_name' and platform_type query parameter is set\", function () {\r",
									"    const queryParams = pm.request.url.query.all();\r",
									"\r",
									"    const subParam = queryParams.find(param => param.key === 'sub');\r",
									"    const database_nameParam = queryParams.find(param => param.key === 'database_name');\r",
									"    const platform_typeParma=queryParams.find(param => param.key === 'platform_name');\r",
									"\r",
									"    // Check if the 'sub' parameter is defined and not empty\r",
									"    pm.expect(subParam).to.not.be.undefined;\r",
									"    pm.expect(subParam.value).to.be.a('string').that.is.not.empty;\r",
									"\r",
									"    pm.expect(database_nameParam).to.not.be.undefined;\r",
									"    pm.expect(database_nameParam.value).to.be.a('string').that.is.not.empty;\r",
									"\r",
									"    pm.expect(platform_typeParma).to.not.be.undefined;\r",
									"    pm.expect(platform_typeParma.value).to.be.a('string').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "06bf8546-4c1a-4c69-99c0-ca7562ec6618",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.platform_type).to.exist;\r",
									"  pm.expect(responseData.database_name).to.exist;\r",
									"  pm.expect(responseData.owner).to.exist;\r",
									"  pm.expect(responseData.size).to.exist;\r",
									"  pm.expect(responseData.schemas).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Schemas array is present and contains expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.schemas).to.exist.and.to.be.an('array');\r",
									"    pm.expect(responseData.schemas).to.have.lengthOf.at.least(1, \"Schemas array should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Schema name within schemas array is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.schemas).to.be.an('array');\r",
									"  \r",
									"  responseData.schemas.forEach(function(schema) {\r",
									"    pm.expect(schema.schema_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Schema name should not be empty\");\r",
									"  });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f65d2171-be45-4bab-8a3f-eda33c726247",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/schemas/?sub=Ik28&database_name=CDC&platform_name=mssql",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"schemas",
								""
							],
							"query": [
								{
									"key": "sub",
									"value": "Ik28"
								},
								{
									"key": "database_name",
									"value": "CDC"
								},
								{
									"key": "platform_name",
									"value": "mssql"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tables and Stored Procedures",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "543f732a-f244-4d76-a13a-17eff68684ae",
								"exec": [
									"pm.test(\"Check if 'sub', 'database_name' ,'schema' and platform_type query parameter is set\", function () {\r",
									"    const queryParams = pm.request.url.query.all();\r",
									"\r",
									"    const subParam = queryParams.find(param => param.key === 'sub');\r",
									"    const database_nameParam = queryParams.find(param => param.key === 'database_name');\r",
									"    const schema_nameParam = queryParams.find(param => param.key === 'schema');\r",
									"    const platform_typeParma=queryParams.find(param => param.key === 'platform_name');\r",
									"\r",
									"    // Check if the 'sub' parameter is defined and not empty\r",
									"    pm.expect(subParam).to.not.be.undefined;\r",
									"    pm.expect(subParam.value).to.be.a('string').that.is.not.empty;\r",
									"\r",
									"    pm.expect(database_nameParam).to.not.be.undefined;\r",
									"    pm.expect(database_nameParam.value).to.be.a('string').that.is.not.empty;\r",
									"\r",
									"    pm.expect(schema_nameParam).to.not.be.undefined;\r",
									"    pm.expect(schema_nameParam.value).to.be.a('string').that.is.not.empty;\r",
									"\r",
									"    pm.expect(platform_typeParma).to.not.be.undefined;\r",
									"    pm.expect(platform_typeParma.value).to.be.a('string').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "37f1cfdd-7a0e-4f46-88aa-df2d692b35bd",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - platform_type, database_name, schema_name, and owner\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.platform_type).to.exist;\r",
									"    pm.expect(responseData.database_name).to.exist;\r",
									"    pm.expect(responseData.schema_name).to.exist;\r",
									"    pm.expect(responseData.owner).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Tables array is present and contains at least one element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.tables).to.exist.and.to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Stored_procedures array is present in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.stored_procedures).to.exist.and.to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "de71d712-b604-4d3f-b74a-f56573958185",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/tables_and_procedures/?sub=Ik28&platform_name=mssql&database=CDC&schema=dbo",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"tables_and_procedures",
								""
							],
							"query": [
								{
									"key": "sub",
									"value": "Ik28"
								},
								{
									"key": "platform_name",
									"value": "mssql"
								},
								{
									"key": "database",
									"value": "CDC"
								},
								{
									"key": "schema",
									"value": "dbo"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "901fff04-c65d-4045-9e05-55e41f6dd65b"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "2aff8b01-4788-4fea-b491-08d30f9bbb92",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "462de91d-3a74-4542-8a39-c3de9fd90bfb",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Response body is valid JSON\", function() {\r",
					"    var jsonData = null;\r",
					"    try {\r",
					"        jsonData = pm.response.json();\r",
					"        console.log(jsonData);\r",
					"    } catch (e) {\r",
					"        console.error(\"Invalid JSON response\", e);\r",
					"    }\r",
					"    pm.expect(jsonData).to.be.an(\"object\");\r",
					"});\r",
					""
				]
			}
		}
	]
}