{
	"info": {
		"_postman_id": "1bee4be6-9b60-461a-94ec-4369ad451646",
		"name": "EDA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31866046"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Users- Add Connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Test for the correct structure of the response schema\r",
									"pm.test(\"Response schema has the correct structure\", function () {\r",
									"    // Ensure response data is correctly parsed\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    // Validate that responseData is an object\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"\r",
									"    // Validate 'success' property\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData.success).to.be.a('boolean');\r",
									"\r",
									"    // Validate 'message' property\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData.message).to.be.a('string').that.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Check if 'sub' and 'db' query parameter is set\", function () {\r",
									"    const queryParams = pm.request.url.query.all();\r",
									"\r",
									"    const subParam = queryParams.find(param => param.key === 'sub');\r",
									"    const dbParam = queryParams.find(param => param.key === 'db');\r",
									"\r",
									"    // Check if the 'sub' parameter is defined and not empty\r",
									"    pm.expect(subParam).to.not.be.undefined;\r",
									"    pm.expect(subParam.value).to.be.a('string').that.is.not.empty;\r",
									"\r",
									"    pm.expect(dbParam).to.not.be.undefined;\r",
									"    pm.expect(dbParam.value).to.equal('pg');\r",
									"});\r",
									"\r",
									"pm.test(\"Validate request body schema\", function () {\r",
									"    const body = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"\r",
									"    pm.expect(body).to.be.an('object');\r",
									"    pm.expect(body.username).to.be.a('string').that.is.not.empty;\r",
									"    pm.expect(body.password).to.be.a('string').that.is.not.empty;\r",
									"    pm.expect(body.port).to.be.a('number').that.is.above(0);\r",
									"    pm.expect(body.host).to.be.a('string').that.is.not.empty;\r",
									"    pm.expect(body.database).to.be.a('string').that.is.not.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"root\",\r\n  \"password\": \"root\",\r\n  \"port\": 3306,\r\n  \"host\": \"localhost\",\r\n  \"database\": \"mydata\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/users/add-connection?sub=Ik25&db=mysql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"users",
								"add-connection"
							],
							"query": [
								{
									"key": "sub",
									"value": "Ik25"
								},
								{
									"key": "db",
									"value": "mysql"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "save user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.to.have.status(200));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response schema for saved user data\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.Proceed).to.be.a('boolean');\r",
									"  pm.expect(responseData.message).to.be.a('string');\r",
									"  pm.expect(responseData.s_ID).to.be.a('string');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Validate the request body\", function () {\r",
									"  const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"\r",
									"  pm.expect(requestBody).to.be.an('object');\r",
									"  pm.expect(requestBody.nickname).to.be.a('string');\r",
									"  pm.expect(requestBody.name).to.be.a('string');\r",
									"  pm.expect(requestBody.email).to.match(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/);\r",
									"  pm.expect(requestBody.sid).to.be.a('string');\r",
									"  pm.expect(requestBody.sub).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nickname\": \"Anuj\",\r\n  \"name\": \"Anuj k\",\r\n  \"email\": \"Anuj25@gmail.com\",\r\n  \"sid\": \"kjasi\",\r\n  \"sub\": \"Ik26\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/save-user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"save-user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - Proceed, message, and sub\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('Proceed');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('sub');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the Content-Type header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Check if 'sub' query parameter is set\", function () {\r",
									"    // Get the query parameters from the request URL\r",
									"    const queryParams = pm.request.url.query.all();\r",
									"\r",
									"    // Find the 'sub' query parameter\r",
									"    const subParam = queryParams.find(param => param.key === 'sub');\r",
									"\r",
									"    // Check if the 'sub' parameter is defined and not empty\r",
									"    pm.expect(subParam).to.not.be.undefined;\r",
									"    pm.expect(subParam.value).to.be.a('string').that.is.not.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sub",
								"value": "ha23",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/authenticate-user?sub=lka225",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"authenticate-user"
							],
							"query": [
								{
									"key": "sub",
									"value": "lka225"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Users - Delete Connection",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Check if 'sub' and 'db' query parameter is set\", function () {\r",
									"    const queryParams = pm.request.url.query.all();\r",
									"\r",
									"    const subParam = queryParams.find(param => param.key === 'sub');\r",
									"    const dbParam = queryParams.find(param => param.key === 'db');\r",
									"\r",
									"    // Check if the 'sub' parameter is defined and not empty\r",
									"    pm.expect(subParam).to.not.be.undefined;\r",
									"    pm.expect(subParam.value).to.be.a('string').that.is.not.empty;\r",
									"\r",
									"    pm.expect(dbParam).to.not.be.undefined;\r",
									"    pm.expect(dbParam.value).to.equal('pg');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - success and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.success).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Success field is a boolean and message is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.success).to.be.a('boolean');\r",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/users/delete-connection?sub=Ik26&db=pg",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"users",
								"delete-connection"
							],
							"query": [
								{
									"key": "sub",
									"value": "Ik26"
								},
								{
									"key": "db",
									"value": "pg"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Updated response time test to 300ms\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Updated response time test to 300ms\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"// Test for the correct structure of the response schema\r",
									"pm.test(\"Response schema has the correct structure\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('Proceed');\r",
									"    pm.expect(responseData).to.have.property('response');\r",
									"    pm.expect(responseData.response).to.be.an('object').that.has.property('message');\r",
									"});\r",
									"\r",
									"//Test for Valid JSON Structure\r",
									"pm.test(\"Response is a valid JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"//Test for HTTP Headers\r",
									"pm.test(\"Response has correct headers\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Check if 'db' query parameter is set\", function () {\r",
									"    const queryParams = pm.request.url.query.all();\r",
									"    const dbParam = queryParams.find(param => param.key === 'db');\r",
									"    pm.expect(dbParam).to.not.be.undefined;\r",
									"    pm.expect(dbParam.value).to.be.oneOf(['pg', 'mysql']);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate request body schema\", function () {\r",
									"    const body = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"\r",
									"    pm.expect(body).to.be.an('object');\r",
									"    pm.expect(body.username).to.be.a('string').that.is.not.empty;\r",
									"    pm.expect(body.password).to.be.a('string').that.is.not.empty;\r",
									"    pm.expect(body.port).to.be.a('number').that.is.above(0);\r",
									"    pm.expect(body.host).to.be.a('string').that.is.not.empty;\r",
									"    pm.expect(body.database).to.be.a('string').that.is.not.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "db",
								"value": "pg",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"root\",\r\n  \"password\": \"root\",\r\n  \"port\": 3306,\r\n  \"host\": \"localhost\",\r\n  \"database\": \"mydata\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/user/verify-connection?db=mysql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"user",
								"verify-connection"
							],
							"query": [
								{
									"key": "db",
									"value": "mysql"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Database",
			"item": [
				{
					"name": "Connect to Database",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Check if 'sub' query parameter is set\", function () {\r",
									"    // Get the query parameters from the request URL\r",
									"    const queryParams = pm.request.url.query.all();\r",
									"\r",
									"    // Find the 'sub' query parameter\r",
									"    const subParam = queryParams.find(param => param.key === 'sub');\r",
									"\r",
									"    // Check if the 'sub' parameter is defined and not empty\r",
									"    pm.expect(subParam).to.not.be.undefined;\r",
									"    pm.expect(subParam.value).to.be.a('string').that.is.not.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Database connection object structure is valid\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  const db = responseData.mysql || responseData.pg;\r",
									"  pm.expect(db).to.exist.and.to.be.an('object');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ensure that the 'message' field in the 'mysql' object is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.mysql.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/connect?sub=Ik26",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"connect"
							],
							"query": [
								{
									"key": "sub",
									"value": "Ik26"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Check if 'sub' query parameter is set\", function () {\r",
									"    // Get the query parameters from the request URL\r",
									"    const queryParams = pm.request.url.query.all();\r",
									"\r",
									"    // Find the 'sub' query parameter\r",
									"    const subParam = queryParams.find(param => param.key === 'sub');\r",
									"\r",
									"    // Check if the 'sub' parameter is defined and not empty\r",
									"    pm.expect(subParam).to.not.be.undefined;\r",
									"    pm.expect(subParam.value).to.be.a('string').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Buckets array should not be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.buckets.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Bucket key should be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    responseData.buckets.forEach(function(bucket) {\r",
									"        pm.expect(bucket.key).to.be.a('string').and.to.not.be.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the structure of the 'buckets' array\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.buckets).to.be.an('array');\r",
									"    \r",
									"    responseData.buckets.forEach(function(bucket) {\r",
									"        pm.expect(bucket).to.be.an('object');\r",
									"        pm.expect(bucket.key).to.exist.and.to.not.be.empty;\r",
									"        pm.expect(bucket.doc_count).to.exist.and.to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/tables/?sub=Ik26",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"tables",
								""
							],
							"query": [
								{
									"key": "sub",
									"value": "Ik26"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Detailed_tables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Check if 'sub', 'page' and 'size' query parameter is set\", function () {\r",
									"    const queryParams = pm.request.url.query.all();\r",
									"\r",
									"    const subParam = queryParams.find(param => param.key === 'sub');\r",
									"    const pageParam = queryParams.find(param => param.key === 'page');\r",
									"    const sizeParam = queryParams.find(param => param.key === 'size');\r",
									"\r",
									"    // Check if the 'sub' parameter is defined and not empty\r",
									"    pm.expect(subParam).to.not.be.undefined;\r",
									"    pm.expect(subParam.value).to.be.a('string').that.is.not.empty;\r",
									"\r",
									"    pm.expect(pageParam).to.not.be.undefined;\r",
									"    pm.expect(pageParam.value).to.be.a('string').that.is.not.empty;\r",
									"\r",
									"    pm.expect(sizeParam).to.not.be.undefined;\r",
									"    pm.expect(sizeParam.value).to.be.a('string').that.is.not.empty;\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed syntax error in the last test\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Tables array should exist in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.tables).to.exist.and.to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Tables array should not be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.tables.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Table description should be a string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    responseData.tables.forEach(function(table) {\r",
									"        pm.expect(table.table_description).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Table names should be unique\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const tableNames = responseData.tables.map(table => table.table_name);\r",
									"    const uniqueTableNames = new Set(tableNames);\r",
									"    pm.expect(uniqueTableNames.size).to.equal(tableNames.length);\r",
									"});\r",
									"\r",
									"pm.test(\"Number of rows and columns should be non-negative\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    responseData.tables.forEach(function(table) {\r",
									"        pm.expect(table.no_of_rows).to.be.at.least(0);\r",
									"        pm.expect(table.no_of_columns).to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each table object has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.tables).to.be.an('array');\r",
									"    responseData.tables.forEach(function(table) {\r",
									"        pm.expect(table).to.have.property('platform_type').that.is.a('string');\r",
									"        pm.expect(table).to.have.property('database_name').that.is.a('string');\r",
									"        pm.expect(table).to.have.property('table_name').that.is.a('string');\r",
									"        pm.expect(table).to.have.property('user_name').that.is.a('string');\r",
									"        pm.expect(table).to.have.property('no_of_rows').that.is.a('number');\r",
									"        pm.expect(table).to.have.property('no_of_columns').that.is.a('number');\r",
									"        pm.expect(table).to.have.property('table_description');\r",
									"        pm.expect(table.table_description).to.satisfy(function(desc) {\r",
									"            return typeof desc === 'string' || desc === null;\r",
									"        });\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/detailed_tables/?sub=Ik26&page=1&size=5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"detailed_tables",
								""
							],
							"query": [
								{
									"key": "sub",
									"value": "Ik26"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "size",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Table-Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 5000ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.include.all.keys(\r",
									"        'platform_type', \r",
									"        'database_name', \r",
									"        'table_name', \r",
									"        'no_of_rows', \r",
									"        'no_of_columns', \r",
									"        'user_name', \r",
									"        'size', \r",
									"        'created_at', \r",
									"        'schema', \r",
									"        'sample_data', \r",
									"        'queries', \r",
									"        'profile_data_quality', \r",
									"        'schema_definition', \r",
									"        'lineage'\r",
									"    );\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the sample_data object structure and fields within the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.sample_data).to.be.an('object');\r",
									"    pm.expect(responseData.sample_data.first_rows).to.be.an('array');\r",
									"    pm.expect(responseData.sample_data.last_rows).to.be.an('array');\r",
									"    \r",
									"    responseData.sample_data.first_rows.forEach(function(row) {\r",
									"        pm.expect(row).to.be.an('object');\r",
									"        pm.expect(row.Table).to.exist.and.to.be.a('number');\r",
									"        pm.expect(row[\"Create Table\"]).to.exist.and.to.be.a('string');\r",
									"    });\r",
									"    \r",
									"    responseData.sample_data.last_rows.forEach(function(row) {\r",
									"        pm.expect(row).to.be.an('object');\r",
									"        pm.expect(row.Table).to.exist.and.to.be.a('number');\r",
									"        pm.expect(row[\"Create Table\"]).to.exist.and.to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the overall structure and fields of the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.platform_type).to.be.a('string');\r",
									"    pm.expect(responseData.database_name).to.be.a('string');\r",
									"    pm.expect(responseData.table_name).to.be.a('string');\r",
									"    pm.expect(responseData.no_of_rows).to.be.a('number');\r",
									"    pm.expect(responseData.no_of_columns).to.be.a('number');\r",
									"    pm.expect(responseData.user_name).to.be.a('string');\r",
									"    pm.expect(responseData.size).to.be.a('number');\r",
									"    pm.expect(responseData.created_at).to.be.a('string');\r",
									"    pm.expect(responseData.schema).to.be.an('array');\r",
									"    pm.expect(responseData.sample_data).to.be.an('object');\r",
									"    pm.expect(responseData.queries).to.be.an('object');\r",
									"    pm.expect(responseData.profile_data_quality).to.be.an('object');\r",
									"    pm.expect(responseData.schema_definition).to.be.a('string');\r",
									"    pm.expect(responseData.lineage).to.be.an('object');\r",
									"    \r",
									"    responseData.schema.forEach(function(column) {\r",
									"        pm.expect(column).to.be.an('object');\r",
									"        pm.expect(column.column_name).to.be.a('string');\r",
									"        pm.expect(column.data_type).to.be.a('string');\r",
									"        pm.expect(column.column_description).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the profile_data_quality object structure and fields within the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.profile_data_quality).to.be.an('object');\r",
									"    pm.expect(responseData.profile_data_quality.table_profile).to.be.an('object');\r",
									"    pm.expect(responseData.profile_data_quality.column_profile).to.be.an('object');\r",
									"    pm.expect(responseData.profile_data_quality.column_profile.column_stats).to.be.an('array');\r",
									"    \r",
									"    responseData.profile_data_quality.column_profile.column_stats.forEach(function(stat) {\r",
									"        pm.expect(stat).to.be.an('object');\r",
									"        pm.expect(stat.database_name).to.be.a('string');\r",
									"        pm.expect(stat.table_name).to.be.a('string');\r",
									"        pm.expect(stat.column_name).to.be.a('string');\r",
									"        pm.expect(stat.null_percentage).to.be.a('number');\r",
									"        pm.expect(stat.distinct_percentage).to.be.a('number');\r",
									"        pm.expect(stat.unique_percentage).to.be.a('number');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the lineage object structure and fields within the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.lineage).to.be.an('object');\r",
									"    pm.expect(responseData.lineage.nodes).to.be.an('array');\r",
									"    pm.expect(responseData.lineage.edges).to.be.an('array');\r",
									"    \r",
									"    responseData.lineage.nodes.forEach(function(node) {\r",
									"        pm.expect(node).to.be.an('object');\r",
									"        pm.expect(node.id).to.be.a('string');\r",
									"    });\r",
									"    \r",
									"    responseData.lineage.edges.forEach(function(edge) {\r",
									"        pm.expect(edge).to.be.an('object');\r",
									"        pm.expect(edge.source).to.be.a('string');\r",
									"        pm.expect(edge.target).to.be.a('string');\r",
									"        pm.expect(edge.columns).to.be.an('array');\r",
									"        \r",
									"        edge.columns.forEach(function(column) {\r",
									"            pm.expect(column).to.be.a('string');\r",
									"        });\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Check if 'sub', 'database_name' and 'table_name' query parameter is set\", function () {\r",
									"    const queryParams = pm.request.url.query.all();\r",
									"\r",
									"    const subParam = queryParams.find(param => param.key === 'sub');\r",
									"    const database_nameParam = queryParams.find(param => param.key === 'database_name');\r",
									"    const table_nameParam = queryParams.find(param => param.key === 'table_name');\r",
									"\r",
									"    // Check if the 'sub' parameter is defined and not empty\r",
									"    pm.expect(subParam).to.not.be.undefined;\r",
									"    pm.expect(subParam.value).to.be.a('string').that.is.not.empty;\r",
									"\r",
									"    pm.expect(database_nameParam).to.not.be.undefined;\r",
									"    pm.expect(database_nameParam.value).to.be.a('string').that.is.not.empty;\r",
									"\r",
									"    pm.expect(table_nameParam).to.not.be.undefined;\r",
									"    pm.expect(table_nameParam.value).to.be.a('string').that.is.not.empty;\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/table-details/?sub=Ik26&database_name=mydata&table_name=customer",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"table-details",
								""
							],
							"query": [
								{
									"key": "sub",
									"value": "Ik26"
								},
								{
									"key": "database_name",
									"value": "mydata"
								},
								{
									"key": "table_name",
									"value": "customer"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
